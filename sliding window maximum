Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7




class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int>ans;
        priority_queue<pair<int,int>>heap;

        for(int i=0;i<k;i++){
            heap.push({nums[i],i});
        }
        ans.push_back(heap.top().first);

        for (int i = k; i < nums.size(); i++) {
 
          heap.push({ nums[i], i });
 
          while (heap.top().second <= i - k)
             heap.pop();
 
         ans.push_back(heap.top().first);
    }
 
    return ans;
        
    }
};
