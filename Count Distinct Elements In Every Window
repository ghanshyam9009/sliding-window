Example 1:
Input: 
K=4,
array[] = {1,2,1,3,4,2,3}
Output: 3  4  3  3
Explanation:
First window is {1, 2, 1, 3}, count of distinct numbers is 3
Second window is {2, 1, 3, 4} count of distinct numbers is 4
Third window is {1, 3, 4, 2} count of distinct numbers is 4
Fourth window is {3, 4, 2, 3} count of distinct numbers is 3


#include <bits/stdc++.h>
using namespace std;
void countDistinct(int A[], int n, int k)
{
   
     vector<int> ans;
        unordered_map<int,int> mp;
        int j=0,i=0;
        while(j<n)
        {
           mp[A[j]]++;
            
            if(j-i+1==k)
            {
                ans.push_back(mp.size());
                mp[A[i]]--;
                if(mp[A[i]]==0)
                {
                    mp.erase(A[i]);
                }
                i++;
            }
            j++;
        }
       for(auto x: ans)
        cout<<x<<" ";
   
}
int main()
{
    int arr[] = { 1, 2, 1, 3, 4, 2, 3 }, k = 4;
    int n = sizeof(arr) / sizeof(arr[0]);
    countDistinct(arr, n, k);
    return 0;
}



// approach 2

#include <bits/stdc++.h> 
vector<int> countDistinctElements(vector<int> &arr, int k) 
{
    
    // Write your code here

    unordered_map<int,int>m;
    vector<int>r;

    int n=a.size();

    for(int i=0;i<k;i++) m[a[i]]++;
        r.push_back(m.size());

    for(int i=1;i<=n-k;i++)
    {
        if(m[a[i-1]]==1) m.erase(a[i-1]);
        else m[a[i-1]]--;

        m[a[i+k-1]]++;
        r.push_back(m.size());
    }

    return r;
}
