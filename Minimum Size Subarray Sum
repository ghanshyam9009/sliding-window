Given an array of positive integers nums and a positive integer target, return the minimal length of a 
subarray
 whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

 

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1


class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {

        int n= nums.size();
        int currentsum =0;
        int minLength=n+1;
        int left =0;

        for(int right=0;right<n;right++){

            currentsum = currentsum+nums[right];
            while(currentsum>=target){
                minLength = min(minLength, right - left + 1);
                currentsum -= nums[left];
                left++;

            }

        }
         if (minLength != n+1) 
            return minLength;
        else 
            return 0;
        
    }
};
