#include <bits/stdc++.h>

using namespace std;
class Solution {
  public:
    int lengthofLongestSubstring(string s) {
      vector < int > mpp(256, -1);

      int left = 0, right = 0;
      int n = s.size();
      int len = 0;
      while (right < n) {
        if (mpp[s[right]] != -1)
          left = max(mpp[s[right]] + 1, left);

        mpp[s[right]] = right;

        len = max(len, right - left + 1);
        right++;
      }
      return len;
    }
};

int main() {
  string str = "takeUforward";
  Solution obj;
  cout << "The length of the longest substring without repeating characters is " << obj.lengthofLongestSubstring(str);
  return 0;
}



// approach 2

#include <iostream>
#include <unordered_set>
#include <string>

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int n= s.length();
        int start=0;
        int end=0;
        int currentlength =0;
        int maxlength =0;

        unordered_set<char>checker;

        while(end<n){
            if(checker.find(s[end]) == checker.end() ){
                checker.insert(s[end]);
                currentlength = end-start+1;
                if(currentlength>maxlength){
                    maxlength= currentlength ;
                }

                end++;
            }
            else{
              checker.erase(s[start]);
              start++;
            }

        }
        return maxlength;       
    }
};
